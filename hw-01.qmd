---
title: "HW 01"
author: "Megan Hokama"
format: 
  html:
    embed-resources: true
toc: true
---
<<<<<<< HEAD

```{r}
#>>>>>>> 12869cb8e0312826aa8a45e29bca88091a105fe4
#install packages and download data
pacman::p_load(tidyverse,
               ggridges,
               dsbox,
               dplyr,
               janitor)
pacman::p_load_gh("rstudio-education/dsbox")

#set theme for ggplot
ggplot2::theme_set(ggplot2::theme_minimal(base_size=11))

#set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        #7" width
  fig.asp = 0.618,      #the golden ratio
  fig.retina = 3,       #dpi multiplier for displaying HTML output on retina
  fig.align = "center", #center align figures
  dpi = 300             #higher dpi, sharper image
)
```

<<<<<<< HEAD
=======


glimpse(accidents)
```

#>>>>>>> 12869cb8e0312826aa8a45e29bca88091a105fe4
## 1 - Road traffic accidents in Edinburgh
```{r}
#|label: create ggplot for road accidents}

day_type_vector <- c(Monday = "Weekday", Tuesday = "Weekday", Wednesday = "Weekday", Thursday = "Weekday", Friday = "Weekday",Saturday = "Weekend", Sunday = "Weekend")

# Use function command
type <- function(day_of_week) 
{return(ifelse(day_of_week %in% names(day_type_vector), day_type_vector[day_of_week], "NA"))
}

# Create new column
accidents$typeday <- sapply(accidents$day_of_week, type)

#Create ggplot with them all in one plot
ggplot(data = accidents, aes(x = time, fill = severity)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~ typeday, ncol = 1) + 
  scale_fill_discrete(name="Severity")+
  labs(
    x        = "Time of the day",
    y        = "Density",
    title    = "Number of accidents throughout the day",
    subtitle = "By day of week and severity",
  )
```


Interpretation: There are no fatal accidents on the weekend compared to the weekdays. On both weekends and weekdays, accidents increase in density during the evening hours (16:00-20:00). In regards to why a density plot was used, when you have data points that overlap or are closely packed, density plots can be more informative than scatter plots. They show the density of points in the overlapping regions, providing a better sense of the data's distribution. Additionally, the overlapping data as well as the peaks in the plot we were supposed to recreate suggests that a density plot might be most appropriate here. 

## 2 - NYC marathon winners

```{r}
#|label: Comparing Histograms and Boxplots to determine marathon time and gender}
install.packages("openintro")
library("openintro")

#Part A
nyc <- nyc_marathon
nyc|>
  glimpse()
nyc <- nyc[is.finite(nyc$time_hrs),

#Histogram with distribution of marathon times of all runners 
nyc%>%
  ggplot(aes(x=time_hrs)) + 
  geom_histogram() +
  labs (x = "Marathon Time",
        y = "Runner Count")

#Boxplot with distribution of marathon times of all runners
boxplot <- nyc %>%
  ggplot(aes(y = time_hrs)) +
  geom_boxplot(fill = "lightblue", color = "black") +  # Box plot
  labs(y = "Marathon Time (hours)") +  # Label the y-axis
  ggtitle("Box Plot of Marathon Times") +  # Add a title
  theme_minimal()  # Use a clean theme for better clarity
  
print(boxplot)

ggplot(nyc, aes(x=time_hrs)) +
  geom_boxplot() +
  labs(x = "Marathon Time",
      y = "Runner Count")
```
Interpretation: The histogram gives more information in regards to the count for all time hours.The histogram provides a detailed view of the frequency distribution, while the box plot offers a concise summary with emphasis on central tendency and outliers.


```{r}
#| label: Part B

#Part B
ggplot(nyc, aes(x=division, y=time_hrs, fill=division)) + 
geom_boxplot() + 
scale_fill_manual(values = c("Men" = rgb(0.1,0.2,0.3), "Women" = rgb(0.1,0.2,0.3))) +
theme(legend.position="none")
labs(x = "Gender",
      y = "Marathon Times") 
```      

Interpretation: Based on the box plots, men have lower marathon times compared to women. Additionally, it shows women having more variation and outliers in terms of marathon times compared to men. 

```{r}
#Part C
#The redundancy is the gender legend as it is not needed since the x-axis already indicates this. 
ggplot(nyc, aes(x=division, y=time_hrs)) + 
geom_boxplot() + 
theme(legend.position="none")
labs(x = "Gender",
      y = "Marathon Times") 
```

```{r}
#Part D -It's not running and keeps giving an error in recognizing geom_line
ggplot(nyc, aes(x=year, y=time_hrs, shape=division))+
  geom_line() +
  scale_color_manual(values = c("Men" = rgb(0.1,0.2,0.3), "Women" = rgb(0.1,0.2,0.3)))+
  scale_shape_manual(values = c("Men" = 5, "Women" = 6)) +
  scale_fill_discrete(name="Gender") +
  labs(x = "Year", y = "Marathon Time")
```

## 3 - US counties
```{r} 
#|label: US County Plots
install.packages("openintro")
library(openintro)
county <- na.omit(county)
county
#Part A
ggplot(county) + 
  geom_point( aes(x=median_edu, y=median_hh_income))+
  geom_boxplot(aes(x = smoking_ban, y = pop2017))
```
  
Firstly, the variables of x and y for the scatterplot and boxplot do not align making it difficult to visualize the data. Additionally, I am having a difficult time making a connection to what the person would want to find when combining the box plot and the scatter plot. Why are we looking at these specific variables and what is the story we are trying to tell?

Part B- 
I think the plot that groups them in a more vertical way, similar to columns. This is visually more easier to interpret when trying to compare across education levels as the y-axis doesn't seem as squished with all the values listed in each group. This reduces redundancy in the plot and allows for easier comparison. 

#Part C
```{r create plot a}
library(gridExtra)
A<- ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point()+
  labs(title = "Plot A")
  
```

```{r create plot b}
B<-ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point()+
  geom_smooth(method = "loess",se=FALSE)+
  labs(title = "Plot B")
```

```{r create plot c}
C<-ggplot(county, aes(homeownership,poverty)) +
  geom_point()+
  geom_smooth(method = "gam",mapping = aes(group = metro),color = "green", se = FALSE) +
  labs(title = "Plot C")
```

```{r create plot d}
D<-ggplot(county, aes(homeownership,poverty)) +
  geom_smooth(mapping = aes(group = metro), se = FALSE) +
  geom_point()+
  labs(title = "Plot D")
```

```{r create plot e}
E<-ggplot(county, aes(homeownership,poverty)) +
  geom_point(aes(color = metro)) +
  geom_smooth(se = FALSE, aes(linetype = metro, group = metro))+
  labs(title = "Plot E")
```

```{r Create plot F}
F<-ggplot(county, aes(homeownership,poverty, colour = metro)) +
  geom_point() +
  geom_smooth(se = FALSE) +
  labs(title = "Plot F")
```

```{r create Plot G}
G<-ggplot(county, aes(homeownership, poverty)) +
  geom_point(aes(color = metro)) +
  geom_smooth(method = "loess", se = FALSE) +
  labs(title = "Plot G")

```

```{r Create Plot H and then arrange on grid}
H<-ggplot(county,mapping=aes(homeownership,poverty))+
  geom_point(aes(color = metro))+
  labs(title = "Plot H")
  
grid.arrange(A, B, C, D, nrow = 2) 
grid.arrange( E, F, G, H, nrow = 2) 

```

## 4 - Rental apartments in SF
```{r create ggplot by creating a separate column of day types and creating a plot comparing based on type of day}
library(dplyr)
rent_data <-readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-07-05/rent.csv') #<1>
glimpse(rent_data)
describe(rent_data)

rent_sf<-filter(rent_data, city == "san francisco")

rent_sf2<-filter(rent_sf, room_in_apt == 0)

nhood2<-c("lakeshore", "NOPA", "mission district", "inner richmond", "portola")

year2<-c("2016", "2017")

nhood3 <-rent_sf2 %>%
        filter(nhood %in% nhood2)
        
yearnhood<-nhood3 %>%
          filter(year %in% year2)
        
# Load a color palette with more distinct colors
install.packages("viridis")
install.packages("viridisLite")

library(viridis)

yearnhood %>%
  ggplot(aes(x = price)) + 
  geom_histogram(binwidth = 200, aes(fill = nhood), position = "dodge") +
  scale_fill_viridis(discrete = TRUE, option = "magma") +
  geom_density(aes(y = ..count..), color = "black", size = .5, position = "identity", binwidth = 50) +  # Adjust position and binwidth
  labs(title = "Histogram of Rental Prices by Neighborhood in San Francisco",
       x = "Price",
       y = "Frequency")
```

Justification: By creating a histogram that has a color for each neighborhood, you can compare the distributions of price and bedrooms across different areas. This allows you to identify variations in property sizes and pricing strategies between neighborhoods. It can be essential for understanding market segmentation and tailoring marketing efforts.They allow you to see the frequency or density of data points within different ranges or bins, making it easy to identify central tendencies, ranges of values, and potential outliers.


## 5 - Napoleonâ€™s march.
```{r Recreating the Napoleons March}
#Read data
napoleon <- read_rds("data/napoleon.rds")
glimpse(napoleon)

#Load libraries
library(scales)
library(grid)
library(gridExtra)
library(dplyr)
install.packages("gridExtra")

#http://euclid.psych.yorku.ca/www/psy6135/tutorials/Minard.html
#I utilized the above link to determine the x and y coordinates. In this case, we are using the lat and long as the x and y coordinates to create a representation of long and lat on the x and y coordinates. 
ggplot(napoleon$troops, aes(long, lat))  + 
      geom_path(aes(size = survivors))
      
#Create a plot that indicates the amount of survivors indicated by size. Direction is indicated by different colors. The colors are indicated by the direction of advancing or retreat. 
breaks <- c(1, 2, 3) * 10^5 
plot_troops <- ggplot(napoleon$troops, aes(long, lat)) +
        geom_path(aes(size = survivors, colour = direction, group = group),
                  lineend="round") +
    scale_size("Survivors", range = c(1,10), #c(0.5, 15),
               breaks=breaks, labels=scales::comma(breaks)) +
    scale_color_manual("Direction", 
                       values = c("#E8CBAB", "#1F1A1B"), 
                       labels=c("Advance", "Retreat"))
                       

#Add in the cities using geom text. This will allow us to put in labels of the cities corresponding to certain points on the graph. 
plot_troops +   
    geom_point(data = napoleon$cities) +
  geom_text(data = napoleon$cities, aes(label = city), vjust = 1.5) 
  
  plot_troops_cities <- last_plot()
  
#Develop temperature line graph using geom path. This will allow to create points within the line graph. 
ggplot(napoleon$temp, aes(long, temp)) +
    geom_path(color="grey", size=1.5) +
    geom_point(size=2) 

#label the points using the format utilized in the Napoleon March
Minard.temp <- napoleon$temp %>%
    mutate(label = paste0(temp, "Â° ", date))
head(Minard.temp$label)

#put the modified labels in the plot 
ggplot(Minard.temp, aes(long, temp)) +
    geom_path(color="red", size=1.5) +
    geom_point(size=1) 
plot_temp <- last_plot()  

#Use the grid arrange command to put the two plots together
 grid.arrange(plot_troops_cities, plot_temp)


```
